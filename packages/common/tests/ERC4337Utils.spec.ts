import { expect } from "chai";
import { Hex, toHex } from "viem";
import { packUserOp } from "../src/ERC4337Utils";

describe("packUserOp", () => {
  it("should pack a UserOperationStruct object", () => {
    const userOp = {
      sender: "0x1234567890123456789012345678901234567890" as Hex,
      nonce: `0x1` as Hex,
      initCode: "0x0987654321098765432109876543210987654321" as Hex,
      callData: "0x" as Hex,
      callGasLimit:  toHex(1000000),
      verificationGasLimit: toHex(1000000),
      preVerificationGas: toHex(1000000),
      maxFeePerGas: toHex(10),
      maxPriorityFeePerGas: toHex(1),
      paymasterAndData: "0x0987654321098765432109876543210987654321" as Hex,
      signature: "0x" as Hex,
    };
    const packedUserOp = packUserOp(userOp, false);
    expect(packedUserOp).to.equal(
      "0x00000000000000000000000012345678901234567890123456789012345678900000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000016000000000000000000000000000000000000000000000000000000000000001a000000000000000000000000000000000000000000000000000000000000f424000000000000000000000000000000000000000000000000000000000000f424000000000000000000000000000000000000000000000000000000000000f4240000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000001c00000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000001409876543210987654321098765432109876543210000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001409876543210987654321098765432109876543210000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    );
  });

  it("should pack a UserOperationStruct object for signature", () => {
    const userOp = {
      sender: "0x1234567890123456789012345678901234567890" as Hex,
      nonce: `0x1` as Hex,
      initCode: "0x0987654321098765432109876543210987654321" as Hex,
      callData: "0x" as Hex,
      callGasLimit:  toHex(1000000),
      verificationGasLimit: toHex(1000000),
      preVerificationGas: toHex(1000000),
      maxFeePerGas: toHex(10),
      maxPriorityFeePerGas: toHex(1),
      paymasterAndData: "0x0987654321098765432109876543210987654321" as Hex,
      signature: "0x" as Hex,
    };
    const packedUserOp = packUserOp(userOp, true);
    expect(packedUserOp).to.equal(
      "0x00000000000000000000000012345678901234567890123456789012345678900000000000000000000000000000000000000000000000000000000000000001a04121637443bf141af4dc01872f24d6933dd1e67581bd12f805a945888da6b0c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a47000000000000000000000000000000000000000000000000000000000000f424000000000000000000000000000000000000000000000000000000000000f424000000000000000000000000000000000000000000000000000000000000f4240000000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000000000000000000000000000000000000000001a04121637443bf141af4dc01872f24d6933dd1e67581bd12f805a945888da6b0",
    );
  });
});
